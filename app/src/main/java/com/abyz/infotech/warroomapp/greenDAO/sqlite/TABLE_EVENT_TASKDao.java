package com.abyz.infotech.warroomapp.greenDAO.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.abyz.infotech.warroomapp.model.TABLE_EVENT_TASK;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TABLE__EVENT__TASK.
*/
public class TABLE_EVENT_TASKDao extends AbstractDao<TABLE_EVENT_TASK, Long> {

    public static final String TABLENAME = "TABLE__EVENT__TASK";

    /**
     * Properties of entity TABLE_EVENT_TASK.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property EtId = new Property(1, Integer.class, "etId", false, "ET_ID");
        public final static Property EtTcId = new Property(2, Integer.class, "etTcId", false, "ET_TC_ID");
        public final static Property EtEventId = new Property(3, Integer.class, "etEventId", false, "ET_EVENT_ID");
        public final static Property Et_StartTime = new Property(4, Long.class, "et_StartTime", false, "ET__START_TIME");
        public final static Property Et_End_Time = new Property(5, Long.class, "et_End_Time", false, "ET__END__TIME");
        public final static Property Et_evnt_name = new Property(6, String.class, "et_evnt_name", false, "ET_EVNT_NAME");
        public final static Property EtStatus = new Property(7, Integer.class, "etStatus", false, "ET_STATUS");
        public final static Property TimeStamp = new Property(8, Long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property EventImage = new Property(9, String.class, "eventImage", false, "EVENT_IMAGE");
    };


    public TABLE_EVENT_TASKDao(DaoConfig config) {
        super(config);
    }

    public TABLE_EVENT_TASKDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TABLE__EVENT__TASK' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'ET_ID' INTEGER UNIQUE ," + // 1: etId
                "'ET_TC_ID' INTEGER," + // 2: etTcId
                "'ET_EVENT_ID' INTEGER," + // 3: etEventId
                "'ET__START_TIME' INTEGER," + // 4: et_StartTime
                "'ET__END__TIME' INTEGER," + // 5: et_End_Time
                "'ET_EVNT_NAME' TEXT," + // 6: et_evnt_name
                "'ET_STATUS' INTEGER," + // 7: etStatus
                "'TIME_STAMP' INTEGER," + // 8: timeStamp
                "'EVENT_IMAGE' TEXT);"); // 8: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TABLE__EVENT__TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TABLE_EVENT_TASK entity) {
        stmt.clearBindings();

        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }

        Integer etId = entity.getEtId();
        if (etId != null) {
            stmt.bindLong(2, etId);
        }

        Integer etTcId = entity.getEtTcId();
        if (etTcId != null) {
            stmt.bindLong(3, etTcId);
        }

        Integer etEventId = entity.getEtEventId();
        if (etEventId != null) {
            stmt.bindLong(4, etEventId);
        }

        Long et_StartTime = entity.getEt_StartTime();
        if (et_StartTime != null) {
            stmt.bindLong(5, et_StartTime);
        }

        Long et_End_Time = entity.getEt_End_Time();
        if (et_End_Time != null) {
            stmt.bindLong(6, et_End_Time);
        }

        String et_evnt_name = entity.getEt_evnt_name();
        if (et_evnt_name != null) {
            stmt.bindString(7, et_evnt_name);
        }

        Integer etStatus = entity.getEtStatus();
        if (etStatus != null) {
            stmt.bindLong(8, etStatus);
        }

        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(9, timeStamp);
        }

        String eventImage = entity.getEvntImage();
        if (eventImage != null) {
            stmt.bindString(10, eventImage);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public TABLE_EVENT_TASK readEntity(Cursor cursor, int offset) {
        TABLE_EVENT_TASK entity = new TABLE_EVENT_TASK( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // etId
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // etTcId
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // etEventId
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // et_StartTime
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // et_End_Time
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // et_evnt_name
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // etStatus
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // timeStamp
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // eventimage
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TABLE_EVENT_TASK entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEtId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEtTcId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEtEventId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setEt_StartTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEt_End_Time(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setEt_evnt_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEtStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTimeStamp(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setEvntImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TABLE_EVENT_TASK entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(TABLE_EVENT_TASK entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
