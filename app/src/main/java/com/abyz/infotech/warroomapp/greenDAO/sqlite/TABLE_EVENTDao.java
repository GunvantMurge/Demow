package com.abyz.infotech.warroomapp.greenDAO.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.abyz.infotech.warroomapp.model.TABLE_EVENT;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TABLE__EVENT.
*/
public class TABLE_EVENTDao extends AbstractDao<TABLE_EVENT, Long> {

    public static final String TABLENAME = "TABLE__EVENT";

    /**
     * Properties of entity TABLE_EVENT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property EventId = new Property(1, Integer.class, "eventId", false, "EVENT_ID");
        public final static Property EventName = new Property(2, String.class, "eventName", false, "EVENT_NAME");
        public final static Property EventLocation = new Property(3, String.class, "eventLocation", false, "EVENT_LOCATION");
        public final static Property EventDate = new Property(4, Long.class, "eventDate", false, "EVENT_DATE");
        public final static Property EventTime = new Property(5, Long.class, "eventTime", false, "EVENT_TIME");
        public final static Property EventDesc = new Property(6, String.class, "eventDesc", false, "EVENT_DESC");
        public final static Property EventImage = new Property(7, String.class, "eventImage", false, "EVENT_IMAGE");
        public final static Property EventStatus = new Property(8, Integer.class, "eventStatus", false, "EVENT_STATUS");
        public final static Property EventLocationId = new Property(9, Integer.class, "eventLocationId", false, "EVENT_LOCATION_ID");
    };


    public TABLE_EVENTDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_EVENTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TABLE__EVENT' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'EVENT_ID' INTEGER UNIQUE ," + // 1: eventId
                "'EVENT_NAME' TEXT," + // 2: eventName
                "'EVENT_LOCATION' TEXT," + // 3: eventLocation
                "'EVENT_DATE' INTEGER," + // 4: eventDate
                "'EVENT_TIME' INTEGER," + // 5: eventTime
                "'EVENT_DESC' TEXT," + // 6: eventDesc
                "'EVENT_IMAGE' TEXT," + // 7: eventImage
                "'EVENT_STATUS' INTEGER," + // 8: eventStatus
                "'EVENT_LOCATION_ID' INTEGER);"); // 9: eventlocationid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TABLE__EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TABLE_EVENT entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(2, eventId);
        }
 
        String eventName = entity.getEventName();
        if (eventName != null) {
            stmt.bindString(3, eventName);
        }
 
        String eventLocation = entity.getEventLocation();
        if (eventLocation != null) {
            stmt.bindString(4, eventLocation);
        }
 
        Long eventDate = entity.getEventDate();
        if (eventDate != null) {
            stmt.bindLong(5, eventDate);
        }
 
        Long eventTime = entity.getEventTime();
        if (eventTime != null) {
            stmt.bindLong(6, eventTime);
        }
 
        String eventDesc = entity.getEventDesc();
        if (eventDesc != null) {
            stmt.bindString(7, eventDesc);
        }
 
        String eventImage = entity.getEventImage();
        if (eventImage != null) {
            stmt.bindString(8, eventImage);
        }
 
        Integer eventStatus = entity.getEventStatus();
        if (eventStatus != null) {
            stmt.bindLong(9, eventStatus);
        }

        Integer eventLocationid = entity.getEventLocareaid();
        if (eventLocationid != null) {
            stmt.bindLong(10, eventLocationid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TABLE_EVENT readEntity(Cursor cursor, int offset) {
        TABLE_EVENT entity = new TABLE_EVENT( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // eventId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // eventName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // eventLocation
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // eventDate
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // eventTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // eventDesc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // eventImage
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // eventStatus
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // eventStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TABLE_EVENT entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEventName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEventLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEventDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEventTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setEventDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEventImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEventStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setEventLocareaid(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TABLE_EVENT entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TABLE_EVENT entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
