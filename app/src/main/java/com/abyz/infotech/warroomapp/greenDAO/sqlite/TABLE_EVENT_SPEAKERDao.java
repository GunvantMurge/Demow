package com.abyz.infotech.warroomapp.greenDAO.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.abyz.infotech.warroomapp.model.TABLE_EVENT_SPEAKER;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TABLE__EVENT__SPEAKER.
*/
public class TABLE_EVENT_SPEAKERDao extends AbstractDao<TABLE_EVENT_SPEAKER, Long> {

    public static final String TABLENAME = "TABLE__EVENT__SPEAKER";

    /**
     * Properties of entity TABLE_EVENT_SPEAKER.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Ep_Id = new Property(1, Integer.class, "ep_Id", false, "EP__ID");
        public final static Property EpSpeakerId = new Property(2, Integer.class, "epSpeakerId", false, "EP_SPEAKER_ID");
        public final static Property EpEventId = new Property(3, Integer.class, "epEventId", false, "EP_EVENT_ID");
        public final static Property EpTopic = new Property(4, String.class, "epTopic", false, "EP_TOPIC");
        public final static Property EpSpeakerDesc = new Property(5, String.class, "epSpeakerDesc", false, "EP_SPEAKER_DESC");
        public final static Property EpTaId = new Property(6, Integer.class, "epTaId", false, "EP_TA_ID");
        public final static Property EpStatus = new Property(7, Integer.class, "epStatus", false, "EP_STATUS");
        public final static Property TimeStamp = new Property(8, Long.class, "timeStamp", false, "TIME_STAMP");
    };


    public TABLE_EVENT_SPEAKERDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_EVENT_SPEAKERDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TABLE__EVENT__SPEAKER' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'EP__ID' INTEGER UNIQUE ," + // 1: ep_Id
                "'EP_SPEAKER_ID' INTEGER ," + // 2: epSpeakerId
                "'EP_EVENT_ID' INTEGER ," + // 3: epEventId
                "'EP_TOPIC' TEXT," + // 4: epTopic
                "'EP_SPEAKER_DESC' TEXT," + // 5: epSpeakerDesc
                "'EP_TA_ID' INTEGER," + // 6: epTaId
                "'EP_STATUS' INTEGER," + // 7: epStatus
                "'TIME_STAMP' INTEGER);"); // 8: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TABLE__EVENT__SPEAKER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TABLE_EVENT_SPEAKER entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer ep_Id = entity.getEp_Id();
        if (ep_Id != null) {
            stmt.bindLong(2, ep_Id);
        }
 
        Integer epSpeakerId = entity.getEpSpeakerId();
        if (epSpeakerId != null) {
            stmt.bindLong(3, epSpeakerId);
        }
 
        Integer epEventId = entity.getEpEventId();
        if (epEventId != null) {
            stmt.bindLong(4, epEventId);
        }
 
        String epTopic = entity.getEpTopic();
        if (epTopic != null) {
            stmt.bindString(5, epTopic);
        }
 
        String epSpeakerDesc = entity.getEpSpeakerDesc();
        if (epSpeakerDesc != null) {
            stmt.bindString(6, epSpeakerDesc);
        }
 
        Integer epTaId = entity.getEpTaId();
        if (epTaId != null) {
            stmt.bindLong(7, epTaId);
        }
 
        Integer epStatus = entity.getEpStatus();
        if (epStatus != null) {
            stmt.bindLong(8, epStatus);
        }
 
        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(9, timeStamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TABLE_EVENT_SPEAKER readEntity(Cursor cursor, int offset) {
        TABLE_EVENT_SPEAKER entity = new TABLE_EVENT_SPEAKER( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ep_Id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // epSpeakerId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // epEventId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // epTopic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // epSpeakerDesc
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // epTaId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // epStatus
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // timeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TABLE_EVENT_SPEAKER entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEp_Id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEpSpeakerId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEpEventId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setEpTopic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEpSpeakerDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEpTaId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setEpStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTimeStamp(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TABLE_EVENT_SPEAKER entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TABLE_EVENT_SPEAKER entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
