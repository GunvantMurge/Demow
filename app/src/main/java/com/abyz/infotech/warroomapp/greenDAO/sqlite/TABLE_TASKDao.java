package com.abyz.infotech.warroomapp.greenDAO.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.abyz.infotech.warroomapp.model.TABLE_TASK;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TABLE__TASK.
*/
public class TABLE_TASKDao extends AbstractDao<TABLE_TASK, Long> {

    public static final String TABLENAME = "TABLE__TASK";

    /**
     * Properties of entity TABLE_TASK.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property TskId = new Property(1, Integer.class, "tskId", false, "TSK_ID");
        public final static Property TskName = new Property(2, String.class, "tskName", false, "TSK_NAME");
        public final static Property TskStatusId = new Property(3, Integer.class, "tskStatusId", false, "TSK_STATUS_ID");
        public final static Property TimeStamp = new Property(4, Long.class, "timeStamp", false, "TIME_STAMP");
    };


    public TABLE_TASKDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_TASKDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TABLE__TASK' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'TSK_ID' INTEGER UNIQUE ," + // 1: tskId
                "'TSK_NAME' TEXT," + // 2: tskName
                "'TSK_STATUS_ID' INTEGER," + // 3: tskStatusId
                "'TIME_STAMP' INTEGER);"); // 4: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TABLE__TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TABLE_TASK entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer tskId = entity.getTskId();
        if (tskId != null) {
            stmt.bindLong(2, tskId);
        }
 
        String tskName = entity.getTskName();
        if (tskName != null) {
            stmt.bindString(3, tskName);
        }
 
        Integer tskStatusId = entity.getTskStatusId();
        if (tskStatusId != null) {
            stmt.bindLong(4, tskStatusId);
        }
 
        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(5, timeStamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TABLE_TASK readEntity(Cursor cursor, int offset) {
        TABLE_TASK entity = new TABLE_TASK( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // tskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tskName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tskStatusId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // timeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TABLE_TASK entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTskId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTskName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTskStatusId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TABLE_TASK entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TABLE_TASK entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
