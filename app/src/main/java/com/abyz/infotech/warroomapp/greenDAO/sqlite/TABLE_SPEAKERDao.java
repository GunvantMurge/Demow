package com.abyz.infotech.warroomapp.greenDAO.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.abyz.infotech.warroomapp.model.TABLE_SPEAKER;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TABLE__SPEAKER.
*/
public class TABLE_SPEAKERDao extends AbstractDao<TABLE_SPEAKER, Long> {

    public static final String TABLENAME = "TABLE__SPEAKER";

    /**
     * Properties of entity TABLE_SPEAKER.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property SpeakerId = new Property(1, Integer.class, "speakerId", false, "SPEAKER_ID");
        public final static Property SpeakerUserId = new Property(2, Integer.class, "speakerUserId", false, "SPEAKER_USER_ID");
        public final static Property SpeakerTypeId = new Property(3, Integer.class, "speakerTypeId", false, "SPEAKER_TYPE_ID");
        public final static Property SpeakerTypeName = new Property(4, String.class, "speakerTypeName", false, "SPEAKER_TYPE_NAME");
        public final static Property SpeakerImage = new Property(5, String.class, "speakerImage", false, "SPEAKER_IMAGE");
        public final static Property SpeakerName = new Property(6, String.class, "speakerName", false, "SPEAKER_NAME");
        public final static Property SpeakerMobileNo = new Property(7, String.class, "speakerMobileNo", false, "SPEAKER_MOBILE_NO");
        public final static Property TimeStamp = new Property(8, Long.class, "timeStamp", false, "TIME_STAMP");
    };


    public TABLE_SPEAKERDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_SPEAKERDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TABLE__SPEAKER' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'SPEAKER_ID' INTEGER UNIQUE ," + // 1: speakerId
                "'SPEAKER_USER_ID' INTEGER UNIQUE ," + // 2: speakerUserId
                "'SPEAKER_TYPE_ID' INTEGER," + // 3: speakerTypeId
                "'SPEAKER_TYPE_NAME' TEXT," + // 4: speakerTypeName
                "'SPEAKER_IMAGE' TEXT," + // 5: speakerImage
                "'SPEAKER_NAME' TEXT," + // 6: speakerName
                "'SPEAKER_MOBILE_NO' TEXT," + // 7: speakerMobileNo
                "'TIME_STAMP' INTEGER);"); // 8: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TABLE__SPEAKER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TABLE_SPEAKER entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer speakerId = entity.getSpeakerId();
        if (speakerId != null) {
            stmt.bindLong(2, speakerId);
        }
 
        Integer speakerUserId = entity.getSpeakerUserId();
        if (speakerUserId != null) {
            stmt.bindLong(3, speakerUserId);
        }
 
        Integer speakerTypeId = entity.getSpeakerTypeId();
        if (speakerTypeId != null) {
            stmt.bindLong(4, speakerTypeId);
        }
 
        String speakerTypeName = entity.getSpeakerTypeName();
        if (speakerTypeName != null) {
            stmt.bindString(5, speakerTypeName);
        }
 
        String speakerImage = entity.getSpeakerImage();
        if (speakerImage != null) {
            stmt.bindString(6, speakerImage);
        }
 
        String speakerName = entity.getSpeakerName();
        if (speakerName != null) {
            stmt.bindString(7, speakerName);
        }
 
        String speakerMobileNo = entity.getSpeakerMobileNo();
        if (speakerMobileNo != null) {
            stmt.bindString(8, speakerMobileNo);
        }
 
        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(9, timeStamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TABLE_SPEAKER readEntity(Cursor cursor, int offset) {
        TABLE_SPEAKER entity = new TABLE_SPEAKER( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // speakerId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // speakerUserId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // speakerTypeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // speakerTypeName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // speakerImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // speakerName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // speakerMobileNo
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // timeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TABLE_SPEAKER entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpeakerId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSpeakerUserId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSpeakerTypeId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSpeakerTypeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSpeakerImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpeakerName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSpeakerMobileNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimeStamp(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TABLE_SPEAKER entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TABLE_SPEAKER entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
