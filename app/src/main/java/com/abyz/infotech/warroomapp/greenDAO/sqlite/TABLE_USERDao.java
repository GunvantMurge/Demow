package com.abyz.infotech.warroomapp.greenDAO.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.abyz.infotech.warroomapp.model.TABLE_USER;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TABLE__USER.
*/
public class TABLE_USERDao extends AbstractDao<TABLE_USER, Long> {

    public static final String TABLENAME = "TABLE__USER";

    /**
     * Properties of entity TABLE_USER.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property UsrId = new Property(1, Integer.class, "usrId", false, "USR_ID");
        public final static Property UsrName = new Property(2, String.class, "usrName", false, "USR_NAME");
        public final static Property UsrGender = new Property(3, String.class, "usrGender", false, "USR_GENDER");
        public final static Property UsrMobile = new Property(4, String.class, "usrMobile", false, "USR_MOBILE");
        public final static Property UsrAddress = new Property(5, String.class, "usrAddress", false, "USR_ADDRESS");
        public final static Property UsrImage = new Property(6, String.class, "usrImage", false, "USR_IMAGE");
        public final static Property UsrState = new Property(7, Integer.class, "usrState", false, "USR_STATE");
        public final static Property TimeStamp = new Property(8, Long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property UsrDepartId = new Property(9, Integer.class, "usrDepartId", false, "USR_DEPART_ID");
        public final static Property UsrDepartName = new Property(10, String.class, "usrDepartName", false, "USR_DEPART_NAME");
        public final static Property UsrLocationId = new Property(11, String.class, "usrLocationId", false, "USR_LOCATION_ID");
    };


    public TABLE_USERDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_USERDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TABLE__USER' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USR_ID' INTEGER UNIQUE ," + // 1: usrId
                "'USR_NAME' TEXT," + // 2: usrName
                "'USR_GENDER' TEXT," + // 3: usrGender
                "'USR_MOBILE' TEXT," + // 4: usrMobile
                "'USR_ADDRESS' TEXT," + // 5: usrAddress
                "'USR_IMAGE' TEXT," + // 6: usrImage
                "'USR_STATE' INTEGER," + // 7: usrState
                "'TIME_STAMP' INTEGER," + // 8: timeStamp
                "'USR_DEPART_ID' INTEGER," + // 9: usrDepartId
                "'USR_DEPART_NAME' TEXT," + // 10: usrDepartName
                "'USR_LOCATION_ID' INTEGER);"); // 11: usrLokationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TABLE__USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TABLE_USER entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer usrId = entity.getUsrId();
        if (usrId != null) {
            stmt.bindLong(2, usrId);
        }
 
        String usrName = entity.getUsrName();
        if (usrName != null) {
            stmt.bindString(3, usrName);
        }

        String usrGender = entity.getUsrGender();
        if (usrGender != null) {
            stmt.bindString(4, usrGender);
        }
 
        String usrMobile = entity.getUsrMobile();
        if (usrMobile != null) {
            stmt.bindString(5, usrMobile);
        }
 
        String usrAddress = entity.getUsrAddress();
        if (usrAddress != null) {
            stmt.bindString(6, usrAddress);
        }
 
        String usrImage = entity.getUsrImage();
        if (usrImage != null) {
            stmt.bindString(7, usrImage);
        }
 
        Integer usrState = entity.getUsrState();
        if (usrState != null) {
            stmt.bindLong(8, usrState);
        }
 
        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(9, timeStamp);
        }
 
        Integer usrDepartId = entity.getUsrDepartId();
        if (usrDepartId != null) {
            stmt.bindLong(10, usrDepartId);
        }
 
        String usrDepartName = entity.getUsrDepartName();
        if (usrDepartName != null) {
            stmt.bindString(11, usrDepartName);
        }

        Integer usrLocationId = entity.getUserLocareaid();
        if (usrLocationId != null) {
            stmt.bindLong(12, usrLocationId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TABLE_USER readEntity(Cursor cursor, int offset) {
        TABLE_USER entity = new TABLE_USER( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // usrId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // usrName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // usrGender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // usrMobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // usrAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // usrImage
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // usrState
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // timeStamp
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // usrDepartId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // usrDepartName
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // usrState
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TABLE_USER entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsrId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUsrName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsrGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsrMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsrAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUsrImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUsrState(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTimeStamp(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUsrDepartId(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUsrDepartName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserLocareaid(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TABLE_USER entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TABLE_USER entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
