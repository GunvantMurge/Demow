package com.abyz.infotech.warroomapp.greenDAO.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.abyz.infotech.warroomapp.model.TABLE_USER_TYPE;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TABLE__USER__TYPE.
*/
public class TABLE_USER_TYPEDao extends AbstractDao<TABLE_USER_TYPE, Long> {

    public static final String TABLENAME = "TABLE__USER__TYPE";

    /**
     * Properties of entity TABLE_USER_TYPE.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property UsrTypeId = new Property(1, Integer.class, "usrTypeId", false, "USR_TYPE_ID");
        public final static Property UsrTypeName = new Property(2, String.class, "usrTypeName", false, "USR_TYPE_NAME");
        public final static Property TimeStamp = new Property(3, Long.class, "timeStamp", false, "TIME_STAMP");
    };


    public TABLE_USER_TYPEDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_USER_TYPEDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TABLE__USER__TYPE' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'USR_TYPE_ID' INTEGER UNIQUE ," + // 1: usrTypeId
                "'USR_TYPE_NAME' TEXT," + // 2: usrTypeName
                "'TIME_STAMP' INTEGER);"); // 3: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TABLE__USER__TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TABLE_USER_TYPE entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer usrTypeId = entity.getUsrTypeId();
        if (usrTypeId != null) {
            stmt.bindLong(2, usrTypeId);
        }
 
        String usrTypeName = entity.getUsrTypeName();
        if (usrTypeName != null) {
            stmt.bindString(3, usrTypeName);
        }
 
        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(4, timeStamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TABLE_USER_TYPE readEntity(Cursor cursor, int offset) {
        TABLE_USER_TYPE entity = new TABLE_USER_TYPE( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // usrTypeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // usrTypeName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // timeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TABLE_USER_TYPE entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsrTypeId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUsrTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeStamp(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TABLE_USER_TYPE entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TABLE_USER_TYPE entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
